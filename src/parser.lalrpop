use std::str::FromStr;
//use crate::lexer;
use crate::expr::{Expr, Span};

grammar(file_id: usize);


pub Expr: Expr = {
    <l:@L> "(" <elems:(<Expr>)+> ")" <r:@R> => Expr::List(Span(l, r, file_id), elems),
    <x:Keyword> => x,
    <x:Symbol> => x,
    <l:@L> <x:Value> <r:@R> => Expr::Value(Span(l, r, file_id), x),
    <l:@L> Comment <r:@R> => Expr::Comment(Span(l, r, file_id)),
};

Keyword: Expr = <l:@L> <x:r":[^\s]+"> <r:@R> => Expr::Keyword(Span(l, r, file_id), x.to_string());
Symbol: Expr = <l:@L> <x:SymbolRegex> <r:@R> => Expr::Symbol(Span(l, r, file_id), x.to_string());

Value: String = {
    <StrLit> => <>,
    <Num> => <>,
    <Bool> => <>,
};

StrLit: String = {
    <x:r#""(?:[^"\\]|\\.)*""#> => {
      x[1..x.len() - 1].to_owned()
    },
};


Num: String = <x:r"[0-9]+"> => x.to_string();
Bool: String = <x:BoolRegex> => x.to_string();

match {
    r"true|false" => BoolRegex,
} else {
    r"[a-zA-Z_!\?<>/.*-+][^\s{}\(\)]*" => SymbolRegex,
    _
}


Comment: () = r";[^\n\r]*";

// vim:shiftwidth=4
