
use crate::ast::{SimplExpr::{self, *}, Span, BinOp::*, UnaryOp::*};
use crate::lexer::{Token, LexicalError};
use crate::lalrpop_helpers::*;


grammar;

extern {
  type Location = usize;
  type Error = LexicalError;

  enum Token {
    "+"  => Token::Plus,
    "-"  => Token::Minus,
    "*"  => Token::Times,
    "/"  => Token::Div,
    "%"  => Token::Mod,
    "==" => Token::Equals,
    "!=" => Token::NotEquals,
    "&&" => Token::And,
    "||" => Token::Or,
    ">"  => Token::GT,
    "<"  => Token::LT,
    "?:" => Token::Elvis,
    "=~" => Token::RegexMatch,

    "!"  => Token::Not,

    ","  => Token::Comma,
    "?"  => Token::Question,
    ":"  => Token::Colon,
    "("  => Token::LPren,
    ")"  => Token::RPren,
    "["  => Token::LBrack,
    "]"  => Token::RBrack,
    "."  => Token::Dot,

    "true"  => Token::True,
    "false" => Token::False,

    "identifier" => Token::Ident(<String>),
    "number"     => Token::NumLit(<String>),
    "string"     => Token::StrLit(<String>),

  }
}

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

pub Expr: SimplExpr = {
  #[precedence(level="0")]
  <Literal>,
  <l:@L> <ident:"identifier"> <r:@R> => VarRef(Span(l, r), ident.to_string()),
  "(" <ExprReset> ")",

  #[precedence(level="1")] #[assoc(side="right")]
  <l:@L> <ident:"identifier"> "(" <args: Comma<ExprReset>> ")" <r:@R> => FunctionCall(Span(l, r), ident, args),
  <l:@L> <value:Expr>         "[" <index: ExprReset>       "]" <r:@R> => JsonAccess(Span(l, r), b(value), b(index)),

  <l:@L> <value:Expr> "." <lit_l:@L> <index:"identifier"> <r:@R> => {
    JsonAccess(Span(l, r), b(value), b(Literal(Span(lit_l, r), index)))
  },

  #[precedence(level="2")] #[assoc(side="right")]
  <l:@L> "!" <e:Expr> <r:@R> => UnaryOp(Span(l, r), Not, b(e)),

  #[precedence(level="3")] #[assoc(side="left")]
  <l:@L> <le:Expr> "*"  <re:Expr> <r:@R> => BinOp(Span(l, r), b(le), Times,       b(re)),
  <l:@L> <le:Expr> "/"  <re:Expr> <r:@R> => BinOp(Span(l, r), b(le), Div,         b(re)),
  <l:@L> <le:Expr> "%"  <re:Expr> <r:@R> => BinOp(Span(l, r), b(le), Mod,         b(re)),

  #[precedence(level="4")] #[assoc(side="left")]
  <l:@L> <le:Expr> "+"  <re:Expr> <r:@R> => BinOp(Span(l, r), b(le), Plus,        b(re)),
  <l:@L> <le:Expr> "-"  <re:Expr> <r:@R> => BinOp(Span(l, r), b(le), Minus,       b(re)),

  #[precedence(level="5")] #[assoc(side="left")]
  <l:@L> <le:Expr> "==" <re:Expr> <r:@R> => BinOp(Span(l, r), b(le), Equals,     b(re)),
  <l:@L> <le:Expr> "!=" <re:Expr> <r:@R> => BinOp(Span(l, r), b(le), NotEquals,  b(re)),
  <l:@L> <le:Expr> "<"  <re:Expr> <r:@R> => BinOp(Span(l, r), b(le), GT,         b(re)),
  <l:@L> <le:Expr> ">"  <re:Expr> <r:@R> => BinOp(Span(l, r), b(le), LT,         b(re)),
  <l:@L> <le:Expr> "=~" <re:Expr> <r:@R> => BinOp(Span(l, r), b(le), RegexMatch, b(re)),

  #[precedence(level="6")] #[assoc(side="left")]
  <l:@L> <le:Expr> "&&" <re:Expr> <r:@R> => BinOp(Span(l, r), b(le), And,        b(re)),
  <l:@L> <le:Expr> "||" <re:Expr> <r:@R> => BinOp(Span(l, r), b(le), Or,         b(re)),
  <l:@L> <le:Expr> "?:" <re:Expr> <r:@R> => BinOp(Span(l, r), b(le), Elvis,      b(re)),

  #[precedence(level="7")] #[assoc(side="right")]
  <l:@L> <cond:Expr> "?" <then:ExprReset> ":" <els:Expr> <r:@R> => {
    IfElse(Span(l, r), b(cond), b(then), b(els))
  },
};

ExprReset = <Expr>;

Literal: SimplExpr = {
  <l:@L> <x:StrLit>   <r:@R> => Literal(Span(l, r), x),
  <l:@L> <x:"number"> <r:@R> => Literal(Span(l, r), x.to_string()),
  <l:@L> "true"       <r:@R> => Literal(Span(l, r), "true".to_string()),
  <l:@L> "false"      <r:@R> => Literal(Span(l, r), "false".to_string()),
}

StrLit: String = {
    <x:"string"> => x[1..x.len() - 1].to_owned(),
};
