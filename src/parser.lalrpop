use std::str::FromStr;
//use crate::lexer;
use crate::expr::{Expr, Span};

grammar(file_id: usize);


pub Expr: Expr = {
    <l:@L> "(" <elems:(<Expr>)+> ")" <r:@R> => Expr::List(Span(l, r, file_id), elems),

    <l:@L> "{" <elems:(<(<Expr>)> <(<Expr>)>)*> "}" <r:@R> => Expr::Table(Span(l, r, file_id), elems),

    <x:Keyword> => x,
    <x:Symbol> => x,
    <l:@L> <x:StrLit> <r:@R> => Expr::Str(Span(l, r, file_id), x),
    <l:@L> <x:Num> <r:@R> => Expr::Number(Span(l, r, file_id), x),
    <l:@L> Comment <r:@R> => Expr::Comment(Span(l, r, file_id)),
};

Keyword: Expr = <l:@L> <x:r":[^\s]+"> <r:@R> => Expr::Keyword(Span(l, r, file_id), x.to_string());
Symbol: Expr = <l:@L> <x:r"[a-zA-Z_!\?<>/.*-+][^\s{}\(\)]*"> <r:@R> => Expr::Symbol(Span(l, r, file_id), x.to_string());

StrLit: String = {
    <x:r#""(?:[^"\\]|\\.)*""#> => {
      x[1..x.len() - 1].to_owned()
    },
}

Comment: () = r";[^\n\r]*";


Num: i32 = <r"[0-9]+"> => i32::from_str(<>).unwrap();



// vim:shiftwidth=4
